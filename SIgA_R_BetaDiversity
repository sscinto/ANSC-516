Beta Diversity R code 
#Load the packages. Everyone needs to do this.
library(tidyverse)
library(vegan)
library(qiime2R)
library(ggplot2)

setwd("~/Desktop/SIgA_Seq")
getwd()
list.files()

if(!dir.exists("output"))
  dir.create("output")

#How to load a file into R
metadata2 <- read.delim("SIgAProject_Metadata.txt", sep = "\t", header = T, quote = "", stringsAsFactors = F)
metadata2[1,]
metadata2[,1]
# When subsetting, the first number is the row and after the comma is the column
metadata2 <- metadata2[-1,]

#Now the qiime2R method
metadata<-read_q2metadata("SIgAProject_Metadata.txt")
str(metadata)
levels(metadata$`Diet`)
colnames(metadata)[5] <- "Diet"
colnames(metadata)[6] <- "Sorting"
colnames(metadata)[7] <- "Region"
str(metadata)

row.names(metadata) <- metadata[,1]
row.names(metadata) <- metadata$SampleID
#metadata <- metadata[,-1]
row.names(metadata)

list.files()
list.files(path = "core-metrics-results", pattern = "bray_curtis_pcoa_resultsls -lh core-metrics-results/bray_curtis_pcoa_results.qza
.qza", full.names = TRUE)


read_qza("core-metrics-results/weighted_unifrac_pcoa_results.qza")


Sorting_colors <- c("Black", "Blue", "Green", "Gray")


# Load the .qza file
weighted_unifrac_pcoa_results.qza <- read_qza("core-metrics-results/weighted_unifrac_pcoa_results.qza")


# Extract Vectors data and join with metadata
bc_meta <- weighted_unifrac_pcoa_results.qza$data$Vectors %>%
  select(SampleID, PC1, PC2, PC3) %>%
  inner_join(metadata, by = c("SampleID" = "SampleID"))


# Now we are going to make an ordination plot
ggplot(bc_meta, aes(x=PC1, y=PC2, color=Diet)) +
  geom_point() + #alpha controls transparency and helps when points are overlapping
  theme_q2r() +
  xlab("PC1 (32.27%)") +
  ylab("PC2 (22.28%)") +
  scale_color_manual(values=c("Blue", "Black", "Green", "Gray"), name = "Diet")

# Now we are going to make our code a little more re-usable
Diet_colors <- c("Black", "Blue", "Green", "Gray")
my_column <- "Diet"
#my_column <- "Diet"

ggplot(bc_meta, aes(x=PC1, y=PC2, color=get("Sorting"))) +
  geom_point() + #alpha controls transparency and helps when points are overlapping
  theme_q2r() +
  facet_grid(~Diet) +
  xlab(paste0("PC1 (", round(100*bc_meta$data$ProportionExplained[1], digits = 2), "%)")) +
  ylab(paste0("PC2 (", round(100*bc_meta$data$ProportionExplained[2], digits = 2), "%)")) +
  scale_color_manual(values=Diet_colors, name = "Sorting")
ggsave(paste0("output/BC-basic_","Sorting",".tiff"), height=2, width=3, device="tiff") # save a PDF 3 inches by 4 inches

centroids <- aggregate(cbind(PC1,PC2)~get("Sorting"),bc_meta,mean)
colnames(centroids)[1] <- "Sorting"

ggplot(bc_meta, aes(x = PC1, y = PC2, color = Sorting)) +
  geom_point() +  # Alpha controls transparency and helps when points are overlapping
  geom_point(data = centroids, size = 3) +
  theme_q2r() +
  stat_ellipse(level = 0.95, type = "t") +
  xlab(paste0("PC1 (", round(100 * bc_meta$data$ProportionExplained[1], digits = 2), "%)")) +
  ylab(paste0("PC2 (", round(100 * bc_meta$data$ProportionExplained[2], digits = 2), "%)")) +
  scale_color_manual(values = Sorting_colors, name = "Sorting")

ggsave(paste0("output/BC-ellipse_", "Sorting", ".pdf"), height = 3, width = 4.5, device = "pdf")  # Save a PDF 3 inches by 4.5 inches

ggplot(bc_meta, aes(x = PC1, y = PC2, color = Sorting)) +
  geom_point(aes(shape = Diet)) +  # Alpha controls transparency and helps when points are overlapping
  geom_point(data=centroids, size = 3) +
  theme_q2r() +
  stat_ellipse(level = 0.95, type = "t") +
  xlab(paste0("PC1 (", round(100 * bc_meta$data$ProportionExplained[1], digits = 2), "%)")) +
  ylab(paste0("PC2 (", round(100 * bc_meta$data$ProportionExplained[2], digits = 2), "%)")) 
  scale_color_manual(values=Sorting_colors, name = "Sorting")

ggsave(paste0("output/BC-ellipse_", "Sorting", "-Diet.pdf"), height = 3, width = 4.5, device = "pdf")  # Save a PDF 3 inches by 4.5 inches

##################################################################################
## SAME thing but with Jaccard 

list.files()
read_qza("core-metrics-results/jaccard_pcoa_results.qza")
Wuni_PCoA<-read_qza("core-metrics-results/jaccard_pcoa_results.qza")

Wuni_meta <- Wuni_PCoA$data$Vectors %>%
  select(SampleID, PC1, PC2) %>%
  inner_join(metadata, by = c("SampleID" = "SampleID"))


# Now we are going to make an ordination plot
ggplot(bc_meta, aes(x=PC1, y=PC2, color=Sorting)) +
  geom_point() + #alpha controls transparency and helps when points are overlapping
  theme_q2r() +
  xlab("PC1 (32.27%)") +
  ylab("PC2 (22.28%)") +
  scale_color_manual(values=c("Blue", "Black", "Green", "Gray"), name = "Sorting")

# Now we are going to make our code a little more re-usable
Sorting_colors <- c("Black", "Blue", "Green", "Gray")
my_column <- "Sorting"
my_column <- "Sorting"


centroids <- aggregate(cbind(PC1,PC2)~get("Sorting"),Wuni_meta,mean)


ggplot(Wuni_meta, aes(x = PC1, y = PC2, color = "Sorting")) +
  geom_point(size = 3) +  # Alpha controls transparency and helps when points are overlapping
  geom_point(data = centroids, size = 3) +
  theme_q2r() +
  stat_ellipse(level = 0.95, type = "t") +
  xlab(paste0("PC1 (", round(100 * Wuni_PCoA$data$ProportionExplained[1], digits = 2), "%)")) +
  ylab(paste0("PC2 (", round(100 * Wuni_PCoA$data$ProportionExplained[2], digits = 2), "%)")) +
  scale_color_manual(values = Sorting_colors, name = "Sorting")  # Use the correct color mapping

ggplot(Wuni_meta, aes(x = PC1, y = PC2, color = Sorting)) + geom_point() +
  geom_point(aes(shape= Diet), size = 3) + #alpha controls transparency and helps when points are overlapping
  #geom_point(data=centroids, size = 3) +
  theme_q2r() +
  stat_ellipse(level = 0.95, type = "t") +
  xlab(paste0("PC1 (", round(100*Wuni_PCoA$data$ProportionExplained[1], digits = 2), "%)")) +
  ylab(paste0("PC2 (", round(100*Wuni_PCoA$data$ProportionExplained[2], digits = 2), "%)")) +
  scale_color_manual(values= Sorting_colors, name = "Sorting")
ggsave(paste0("output/Wuni-ellipse_","Sorting","-Diet.pdf"), height=3, width=4.5, device="pdf") # save a PDF 3 inches by 4 inches


##################################################################################
## SAME thing but with Unweighted unifrac 

list.files()
read_qza("core-metrics-results/unweighted_unifrac_pcoa_results.qza")
Wuni_PCoA<-read_qza("core-metrics-results/unweighted_unifrac_pcoa_results.qza")

Wuni_meta <- Wuni_PCoA$data$Vectors %>%
  select(SampleID, PC1, PC2) %>%
  inner_join(metadata, by = c("SampleID" = "SampleID"))


# Now we are going to make an ordination plot
ggplot(bc_meta, aes(x=PC1, y=PC2, color=Sorting)) +
  geom_point() + #alpha controls transparency and helps when points are overlapping
  theme_q2r() +
  xlab("PC1 (32.27%)") +
  ylab("PC2 (22.28%)") +
  scale_color_manual(values=c("Blue", "Black", "Green", "Gray"), name = "Sorting")

# Now we are going to make our code a little more re-usable
Sorting_colors <- c("Black", "Blue", "Green", "Gray")
my_column <- "Sorting"
my_column <- "Sorting"


centroids <- aggregate(cbind(PC1,PC2)~get("Sorting"),Wuni_meta,mean)


ggplot(Wuni_meta, aes(x = PC1, y = PC2, color = "Sorting")) +
  geom_point(size = 3) +  # Alpha controls transparency and helps when points are overlapping
  geom_point(data = centroids, size = 3) +
  theme_q2r() +
  stat_ellipse(level = 0.95, type = "t") +
  xlab(paste0("PC1 (", round(100 * Wuni_PCoA$data$ProportionExplained[1], digits = 2), "%)")) +
  ylab(paste0("PC2 (", round(100 * Wuni_PCoA$data$ProportionExplained[2], digits = 2), "%)")) +
  scale_color_manual(values = Sorting_colors, name = "Sorting")  # Use the correct color mapping

ggplot(Wuni_meta, aes(x = PC1, y = PC2, color = Sorting)) + geom_point() +
  geom_point(aes(shape= Diet), size = 3) + #alpha controls transparency and helps when points are overlapping
  #geom_point(data=centroids, size = 3) +
  theme_q2r() +
  stat_ellipse(level = 0.95, type = "t") +
  xlab(paste0("PC1 (", round(100*Wuni_PCoA$data$ProportionExplained[1], digits = 2), "%)")) +
  ylab(paste0("PC2 (", round(100*Wuni_PCoA$data$ProportionExplained[2], digits = 2), "%)")) +
  scale_color_manual(values= Sorting_colors, name = "Sorting")
ggsave(paste0("output/Wuni-ellipse_","Sorting","-Diet.pdf"), height=3, width=4.5, device="pdf") # save a PDF 3 inches by 4 inches


##################################################################################
## SAME thing but with Bray curtis 

list.files()
read_qza("core-metrics-results/bray_curtis_pcoa_results.qza")
Wuni_PCoA<-read_qza("core-metrics-results/bray_curtis_pcoa_results.qza")

Wuni_meta <- Wuni_PCoA$data$Vectors %>%
  select(SampleID, PC1, PC2) %>%
  inner_join(metadata, by = c("SampleID" = "SampleID"))


# Now we are going to make an ordination plot
ggplot(bc_meta, aes(x=PC1, y=PC2, color=Sorting)) +
  geom_point() + #alpha controls transparency and helps when points are overlapping
  theme_q2r() +
  xlab("PC1 (32.27%)") +
  ylab("PC2 (22.28%)") +
  scale_color_manual(values=c("Blue", "Black", "Green", "Gray"), name = "Sorting")

# Now we are going to make our code a little more re-usable
Sorting_colors <- c("Black", "Blue", "Green", "Gray")
my_column <- "Sorting"
my_column <- "Sorting"


centroids <- aggregate(cbind(PC1,PC2)~get("Sorting"),Wuni_meta,mean)


ggplot(Wuni_meta, aes(x = PC1, y = PC2, color = "Sorting")) +
  geom_point(size = 3) +  # Alpha controls transparency and helps when points are overlapping
  geom_point(data = centroids, size = 3) +
  theme_q2r() +
  stat_ellipse(level = 0.95, type = "t") +
  xlab(paste0("PC1 (", round(100 * Wuni_PCoA$data$ProportionExplained[1], digits = 2), "%)")) +
  ylab(paste0("PC2 (", round(100 * Wuni_PCoA$data$ProportionExplained[2], digits = 2), "%)")) +
  scale_color_manual(values = Sorting_colors, name = "Sorting")  # Use the correct color mapping

ggplot(Wuni_meta, aes(x = PC1, y = PC2, color = Sorting)) + geom_point() +
  geom_point(aes(shape= Diet), size = 3) + #alpha controls transparency and helps when points are overlapping
  #geom_point(data=centroids, size = 3) +
  theme_q2r() +
  stat_ellipse(level = 0.95, type = "t") +
  xlab(paste0("PC1 (", round(100*Wuni_PCoA$data$ProportionExplained[1], digits = 2), "%)")) +
  ylab(paste0("PC2 (", round(100*Wuni_PCoA$data$ProportionExplained[2], digits = 2), "%)")) +
  scale_color_manual(values= Sorting_colors, name = "Sorting")
ggsave(paste0("output/Wuni-ellipse_","Sorting","-Diet.pdf"), height=3, width=4.5, device="pdf") # save a PDF 3 inches by 4 inches



##################################################################################
#Run some PERMANOVAs
#

bc_dist_mat<-read_qza("core-metrics-results/unweighted_unifrac_distance_matrix.qza")
bc_dm <- as.matrix(bc_dist_mat$data) 
rownames(bc_dm) == metadata$SampleID ## all these values need to be "TRUE"
metadata_sub <- metadata[match(rownames(bc_dm),metadata$SampleID),]
rownames(bc_dm) == metadata_sub$SampleID ## all these values need to be "TRUE"

PERMANOVA_out <- adonis2(bc_dm ~ Diet, data = metadata_sub)

write.table(PERMANOVA_out,"output/Diet1_Adonis_overall.csv",sep=",", row.names = TRUE) 

######################################################################################
##  Pairwise adonis function
##  we can also performe a pairwise comparison with the function 
##  Pairwise Adonis funtion by edro Martinez Arbizu & Sylvain Monteux
##  https://github.com/pmartinezarbizu/pairwiseAdonis/blob/master/pairwiseAdonis/R/pairwise.adonis.R
#######################################################################################

pairwise.adonis2 <- function(x, data, strata = NULL, nperm=999, ... ) {
  
  #describe parent call function 
  ststri <- ifelse(is.null(strata),'Null',strata)
  fostri <- as.character(x)
  #list to store results
  
  #copy model formula
  x1 <- x
  # extract left hand side of formula
  lhs <- x1[[2]]
  # extract factors on right hand side of formula 
  rhs <- x1[[3]]
  # create model.frame matrix  
  x1[[2]] <- NULL   
  rhs.frame <- model.frame(x1, data, drop.unused.levels = TRUE) 
  
  # create unique pairwise combination of factors 
  co <- combn(unique(as.character(rhs.frame[,1])),2)
  
  # create names vector   
  nameres <- c('parent_call')
  for (elem in 1:ncol(co)){
    nameres <- c(nameres,paste(co[1,elem],co[2,elem],sep='_vs_'))
  }
  #create results list  
  res <- vector(mode="list", length=length(nameres))
  names(res) <- nameres
  
  #add parent call to res 
  res['parent_call'] <- list(paste(fostri[2],fostri[1],fostri[3],', strata =',ststri, ', permutations',nperm ))
  
  
  #start iteration trough pairwise combination of factors  
  for(elem in 1:ncol(co)){
    
    #reduce model elements  
    if(inherits(eval(lhs),'dist')){	
      xred <- as.dist(as.matrix(eval(lhs))[rhs.frame[,1] %in% c(co[1,elem],co[2,elem]),
                                           rhs.frame[,1] %in% c(co[1,elem],co[2,elem])])
    }else{
      xred <- eval(lhs)[rhs.frame[,1] %in% c(co[1,elem],co[2,elem]),]
    }
    
    mdat1 <-  data[rhs.frame[,1] %in% c(co[1,elem],co[2,elem]),] 
    
    # redefine formula
    if(length(rhs) == 1){
      xnew <- as.formula(paste('xred',as.character(rhs),sep='~'))	
    }else{
      xnew <- as.formula(paste('xred' , 
                               paste(rhs[-1],collapse= as.character(rhs[1])),
                               sep='~'))}
    
    #pass new formula to adonis
    if(is.null(strata)){
      ad <- adonis2(xnew,data=mdat1, ... )
    }else{
      perm <- how(nperm = nperm)
      setBlocks(perm) <- with(mdat1, mdat1[,ststri])
      ad <- adonis2(xnew,data=mdat1,permutations = perm, ... )}
    res[nameres[elem+1]] <- list(ad[1:5])
  }
  #names(res) <- names  
  class(res) <- c("pwadstrata", "list")
  return(res)
} 

Sorting_Pair <- pairwise.adonis2(bc_dm ~ Sorting, data = metadata_sub)
write.table(Sorting_Pair,"output/Sorting_Adonis_pairwise.csv",sep=",", row.names = TRUE) 

